generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Bookmark {
  id        Int      @id @default(autoincrement())
  userId    Int
  shopId    Int
  category  String? 
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  shop      Shop     @relation(fields: [shopId], references: [id])

  @@unique([userId, shopId]) // Ensures one user can only bookmark a shop once
}

model ReviewLike {
  id        Int      @id @default(autoincrement())
  userId    Int
  reviewId  Int
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  review    Review   @relation(fields: [reviewId], references: [id])

  @@unique([userId, reviewId]) // Ensures one user can only like a review once
}
model User {
  id        Int       @id @default(autoincrement())
  name      String
  email     String    @unique
  password  String
  role      String    @default("user") // user, store, admin
  status    String    @default("pending") // active, pending, inactive
  createdAt DateTime  @default(now())
  // คิดว่าน่าจะต้องเพิ่มตรงนี้
  shop      Shop? // User can have a shop
  reviews   Review[] // User can have reviews
  comments  Comment[] // User can have comments
  likedReviews ReviewLike[]
  bookmarks Bookmark[]
}

model Shop {
  id          Int          @id @default(autoincrement())
  name        String
  // ? คือ optional
  address     String?
  description String? // ให้ร้านอธิบายเกี่ยวกับร้านของตัวเอง
  phone       String?
  email       String?
  openTime    String?
  closeTime   String?
  latitude    Float? // ระบุละติจูดของตำแหน่งร้าน
  longitude   Float? // ระบุลองจิจูดของตำแหน่งร้าน
  userId      Int          @unique
  user        User         @relation(fields: [userId], references: [id])
  reviews     Review[] // ร้านสามารถมี review ได้หลายคน
  images      Image[] // ร้านสามารถมีรูปได้หลายรูป
  comments    Comment[] // ร้านสามารถมี comment ได้หลายคน
  bookmarks   Bookmark[]
  type        String       @default("ที่กิน")
  rating      Float        @default(0) // คะแนนร้าน
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model Review {
  id        Int          @id @default(autoincrement())
  content   String
  rating    Int
  comment   String
  status    String       @default("pending")
  userId    Int
  shopId    Int
  likes     Int          @default(0)
  reply     String?
  reported  Boolean      @default(false)
  reason    String?
  createdAt DateTime     @default(now())
  user      User         @relation(fields: [userId], references: [id])
  shop      Shop         @relation(fields: [shopId], references: [id])
  likedBy   ReviewLike[] // Add this relation

  @@unique([userId, shopId]) // Ensures one review per user per shop
}
model Comment {
  id        Int      @id @default(autoincrement())
  content   String // ความคิดเห็น
  status    String   @default("pending") // pending, approved, rejected
  userId    Int
  shopId    Int
  reported  Boolean  @default(false)
  reason    String?
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  shop      Shop     @relation(fields: [shopId], references: [id])
}

model Image {
  id         Int      @id @default(autoincrement())
  asset_id   String // ID ของรูปภาพจาก cloud storage
  public_id  String // Public ID จาก cloud storage
  url        String // URL ปกติของรูปภาพ
  secure_url String // HTTPS URL ของรูปภาพ
  shopId     Int // Foreign key ไปยัง Shop
  shop       Shop     @relation(fields: [shopId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model SafetyLevel {
  id          Int      @id @default(autoincrement())
  label       String
  maxValue    Int
  color       String
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

